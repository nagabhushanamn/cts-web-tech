

-----------------------------------------------------------------

 
 ----------------------------------------------------------------- 


 .js-lang

 --> scripting lang for web-pages in browser-envi
 +
 --> server-side lang on Node.js

 --> mobile-appln 

 .js-lang

   --> functional pgming lang
   --> OOP lang
   --> dynamic data-types
   --> closures  ==> best lang for evented-envi ( browser-side or server-side)

   --> single-threaded ==> can implement concurrency 
   --> IO oprns Non-Blocking

   where/when to use .lang ?


   on event, to execute any function async.
   i.e for any event-driven appln development.



   how to execute .js programs?

   using 'JS-Engine'


   browser-envi

    1. chrome  ==> v8(c++)
    2. IE      ==> chakra
    3. Firefox ==> rhino
    4. safari  ==> nitro
    ....

    other envi

    1. Node.js  ==> v8
    2. JVM      ==> nashorn
    3. MongoDB
    4. Apache CouchDB



    .js-lang is an implementation of 'ECMAScript' spec or ES


    --------------------------------------------------

day-1

    .js-lang

    --> js-data-structures
    --> execution-contexts or  scope-chains
    --> function-depth
    --> 'this' ==> keyword
    --> closures
    --> Inheritance

day-2

    --> object-advanced

    --> ECMA2015 or ES6 - New features

    -->concurrency-model  ( foundation topic to undertand Node.js in future)
    
day-3

   --> JS-modules
   --> Jquery-advanced
   --> HTML-5 APIs

    
--------------------------------------------------


to install development web-server

==> install node.js

if your behind cts internet proxy

> npm set config proxy http://proxy.cognizant:6050
> npm set config strict-ssl false


> npm install -g live-server


--------------------------------------------------

ES6 New Features


1. let , const keywords with block-scope
2. arrow-functions
3. function default-params
4. rest & spread operators
5. object-literal enhancements
6. string interpolation
7. destructuring
8. octal & binary representations

    0o10 or 0O10  ==> 8
    0b0011 or 0B0011 ==> 3

9. for-of loop    

10. class syntax

11. Symbol type

12. Iterators  ( obj with collection of other elemments)

13. Collections : Map and Set

14. Promise API



-------------------------

1. MDN javascript

2. exploringjs.com